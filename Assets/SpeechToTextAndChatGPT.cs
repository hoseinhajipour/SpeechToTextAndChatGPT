using System;
using System.Collections;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Networking;
using System.Speech.Recognition;
using System.Speech.Synthesis;
using TMPro;
using System.Collections.Generic;
using Newtonsoft.Json;

public class SpeechToTextAndChatGPT : MonoBehaviour
{
    public TextMeshProUGUI chatText;
    public Button micButton;

    private SpeechRecognitionEngine recognizer;
    private SpeechSynthesizer synthesizer;
    private bool isRecording = false;
    private InstalledVoice femaleVoice = null;
    
    private const string chatGptApiKey = "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";
    private const string chatGptApiEndpoint = "https://api.openai.com/v1/chat/completions";

    private void LoadGrammar()
    {
        Choices choices = new Choices("hello", "goodbye", "yes", "no","chatgpt","chat gpt");
        GrammarBuilder grammarBuilder = new GrammarBuilder(choices);
        Grammar grammar = new Grammar(grammarBuilder);

        recognizer.LoadGrammar(grammar);
    }

    void Start()
    {

        // Create the speech recognition engine and set up event handlers
        recognizer = new SpeechRecognitionEngine();
        recognizer.SetInputToDefaultAudioDevice();
        recognizer.SpeechRecognized += Recognizer_SpeechRecognized;
        LoadGrammar();
        // Create the speech synthesizer
        synthesizer = new SpeechSynthesizer();

        // Set up the microphone button click event
        micButton.onClick.AddListener(OnMicButtonClick);
        
        foreach (InstalledVoice voice in synthesizer.GetInstalledVoices())
        {
            if (voice.VoiceInfo.Gender == VoiceGender.Female)
            {
                femaleVoice = voice;
                break;
            }
        }

    }

    private void Recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)
    {
        if (e.Result.Confidence >= 0.5f)
        {
            string text = e.Result.Text;

            // Display the user's speech in the chat window
            DisplayChatMessage(text, isUserMessage: true);

            // Send the user's speech to the ChatGPT API for processing
            StartCoroutine(SendToChatGPT(text));
        }
    }

    private void OnMicButtonClick()
    {
        if (isRecording)
        {
            // Stop recording and recognize the speech
            isRecording = false;
            micButton.GetComponentInChildren<TextMeshProUGUI>().text = "Start Recording";
            recognizer.RecognizeAsyncStop();
        }
        else
        {
            // Start recording
            isRecording = true;
            micButton.GetComponentInChildren<TextMeshProUGUI>().text = "Stop Recording";
            recognizer.RecognizeAsync(RecognizeMode.Multiple);
        }
    }

    IEnumerator SendToChatGPT(string text)
    {
        // Create the request data
        Dictionary<string, object> jayParsedAry = new Dictionary<string, object>()
        {
            { "model", "gpt-3.5-turbo" },
            { "messages", new List<Dictionary<string, string>>() {
                new Dictionary<string, string>()
                {
                    { "role", "user" },
                    { "content", text }
                }
            }}
        };

        string jsonData = JsonConvert.SerializeObject(jayParsedAry);
        byte[] postData = System.Text.Encoding.UTF8.GetBytes(jsonData);

        Debug.Log(jsonData);
        // Create the web request
        UnityWebRequest request = new UnityWebRequest(chatGptApiEndpoint, "POST");
        request.uploadHandler = new UploadHandlerRaw(postData);
        request.downloadHandler = new DownloadHandlerBuffer();
        request.SetRequestHeader("Content-Type", "application/json");
        request.SetRequestHeader("Authorization", "Bearer " + chatGptApiKey);

        // Send the request
        yield return request.SendWebRequest();

        if (request.result == UnityWebRequest.Result.ConnectionError ||
            request.result == UnityWebRequest.Result.ProtocolError)
        {
            Debug.LogError(request.error);
        }
        else
        {

            // Get the response text
            string responseText = request.downloadHandler.text;
            Debug.Log(responseText);
            // Parse the response JSON
            ChatGPTResponse response = JsonUtility.FromJson<ChatGPTResponse>(responseText);
            


            if (response != null && response.choices != null && response.choices.Length > 0)
            {
                // Get the chat message generated by the chatbot
                string chatMessage = response.choices[0].message.content;
                Debug.Log(chatMessage);
                // Display the chat message in the chat window
                DisplayChatMessage(chatMessage, isUserMessage: false);

                // Synthesize the chat message as speech
                try
                {
                    synthesizer.SelectVoice(femaleVoice.VoiceInfo.Name);
                    synthesizer.Speak(chatMessage);
                }
                catch (Exception e)
                {
                    Debug.Log(e);
                }
            
            }
        }
    }


    private void DisplayChatMessage(string message, bool isUserMessage)
    {
        string colorCode = isUserMessage ? "#007AFF" : "#555555";
        string htmlMessage = $"<color={colorCode}>{message}</color>";
        chatText.text += $"{htmlMessage}\n";
    }
    [System.Serializable]
    private class ChatGPTResponse
    {
        public string id;
        public string responseType;
        public long created;
        public string model;
        public Usage usage;
        public Choice[] choices;

        [System.Serializable]
        public class Usage
        {
            public int prompt_tokens;
            public int completion_tokens;
            public int total_tokens;
        }

        [System.Serializable]
        public class Choice
        {
            public Message message;
            public string finish_reason;
            public int index;

            [System.Serializable]
            public class Message
            {
                public string role;
                public string content;
            }
        }
    }

}